precision mediump float;
 varying mediump vec2 textureCoordinate;
 uniform sampler2D inputImageTexture;
 uniform sampler2D inputImageTexture2;
 uniform mediump float adjustFactor;
 
 const mediump float FLT_EPS = 1e-8;
 const mediump float histSize = 256.0;
 const mediump float tilesX = 8.0;
 const mediump float tilesY = 8.0;
 const mediump float inputLutSizeX = 256.0;
 const mediump float inputLutSizeY = 64.0;
 
 mediump float rgb_hue(mediump vec3 rgb) 
 {
   mediump float r = rgb.r;
   mediump float g = rgb.g;
   mediump float b = rgb.b;
   mediump float hue = 0.0;
 
   mediump float Max = max(max(r, g), b);
   mediump float Min = min(min(r, g), b);
   if (Max == Min) 
     return 0.0;
 
   mediump float diff = Max - Min;
 
   if (r == Max) 
     hue = (g - b) / diff;
   else if (g == Max) 
     hue = 2.0 + (b - r) / diff;
   else 
     hue = 4.0 + (r - g) / diff;
 
   hue /= 6.0;
 
   if (hue < 0.0) 
     hue += 1.0;
 
    return hue;
 }
 
 mediump float rgb_saturation(mediump vec3 rgb) 
 {
   mediump float r = rgb.r;
   mediump float g = rgb.g;
   mediump float b = rgb.b;
   mediump float saturation = 0.0;
 
   mediump float Max = max(max(r, g), b);
   mediump float Min = min(min(r, g), b);
   if (Max == Min) 
     return 0.0;
 
   mediump float diff = Max - Min;
   mediump float luminance = (Max + Min) * 0.5;
 
   if (luminance < 0.5) 
     saturation = diff / (Max + Min);
   else 
     saturation = diff / (2.0 - Max - Min);
 
   return saturation;
 }
 
 mediump float rgb_luminance(mediump vec3 c) 
 {
     mediump float Max = max(max(c.r, c.g), c.b);
     mediump float Min = min(min(c.r, c.g), c.b);
     return (Max + Min) / 2.0;
 }
 
 mediump float hue2rgb(mediump float m1, mediump float m2, mediump float hue) 
 {
   mediump float val = 0.0;
 
   if (hue < 0.0) 
     hue += 1.0;
   else if (hue > 1.0) 
     hue -= 1.0;
 
   if (6.0 * hue < 1.0) 
     val = m1 + (m2 - m1) * hue * 6.0;
   else if (2.0 * hue < 1.0) 
     val = m2;
   else if (3.0 * hue < 2.0) 
     val = m1 + (m2 - m1) * ((2.0 / 3.0) - hue) * 6.0;
   else 
     val = m1;
 
   return val;
 }
 
 
 mediump vec3 hsl2rgb(mediump vec3 hsl) 
 { 
   mediump float hue        = hsl.x;
   mediump float saturation = hsl.y;
   mediump float luminance  = hsl.z;
   mediump float r, g, b;
 
   if (saturation == 0.0) {
     b = g = r = luminance;
   } else {
     mediump float m1, m2;
     if (luminance <= 0.5) 
       m2 = luminance * (1.0 + saturation);
     else 
       m2 = luminance + saturation - luminance * saturation;
 
     m1 = 2.0 * luminance - m2;
 
     r = hue2rgb(m1, m2, hue + (1.0 / 3.0));
     g = hue2rgb(m1, m2, hue);
     b = hue2rgb(m1, m2, hue - (1.0 / 3.0));
   } 
 
   return vec3(r, g, b);
 }
 
 mediump vec3 rgb2hsv(mediump vec3 rgb) 
 {
   mediump float r = rgb.r;
   mediump float g = rgb.g;
   mediump float b = rgb.b;
 
   mediump float hue = 0.0;
   mediump float saturation = 0.0;
   mediump float luminance = 0.0;
 
   mediump float Max = max(max(r, g), b);
   mediump float Min = min(min(r, g), b);
 
   luminance = Max;
 
   if (Max == Min) 
     return vec3(hue, saturation, luminance);
 
   mediump float diff = Max - Min;
 
   saturation = diff / Max;
   diff = 60.0 / diff;
 
   if (Max == r) 
     hue = (g - b) * diff;
   else if (Max == g) 
     hue = 120.0 + (b - r) * diff;
   else 
     hue = 240.0 + (r - g) * diff;
 
   if (hue < 0.0) 
     hue += 360.0;
 
   return vec3(hue, saturation, luminance);
 }
 
 mediump vec3 hsv2rgb(mediump vec3 hsv) 
 { 
   mediump float hue        = hsv.x;
   mediump float saturation = hsv.y;
   mediump float luminance  = hsv.z;
   mediump float r, g, b;
 
   if (saturation == 0.0) {
     b = g = r = luminance;
   } else {
     mediump float h = hue / 60.0;
 
     if(h < 0.0){ 
       do h += 6.0; while(h < 0.0);
     }else if(h >= 6.0){
       do h -= 6.0; while(h >= 6.0);
     }
 
     mediump float tmp = floor(h); 
     int sector = int(tmp);
 
     h -= tmp;
 
     mediump float tab[4];
     tab[0] = luminance;
     tab[1] = luminance * (1.0 - saturation);
     tab[2] = luminance * (1.0 - saturation * h);
     tab[3] = luminance * (1.0 - saturation * (1.0 - h));
 
     if(0 == sector){
       b = tab[1];
       g = tab[3];
       r = tab[0];
     }else if(1 == sector){
       b = tab[1];
       g = tab[0];
       r = tab[2];
     }else if(2 == sector){
       b = tab[3];
       g = tab[0];
       r = tab[1];
     }else if(3 == sector){
       b = tab[0];
       g = tab[2];
       r = tab[1];
     }else if(4 == sector){
       b = tab[0];
       g = tab[1];
       r = tab[3];
     }else if(5 == sector){
       b = tab[2];
       g = tab[1];
       r = tab[0];
     }
   } //else 
 
   return vec3(r, g, b);
 }
 
 mediump vec2 CalculateLutPos(mediump vec2 pix_pos, float value) {
   mediump vec2 pos = vec2(0.0, 0.0);
 
   pos.y = (2.0 * (pix_pos.y * tilesX + pix_pos.x) + 1.0) / (2.0 * inputLutSizeY);
   pos.x = (2.0 * value + 1.0) / (2.0 * inputLutSizeX);
 
   return pos;
 }
 
 void main(){
   if (abs(adjustFactor) < FLT_EPS) { 
     gl_FragColor = texture2D(inputImageTexture, textureCoordinate);
   }else {
     //rgb to hsl 
     mediump vec4 color = texture2D(inputImageTexture, textureCoordinate);
 
     mediump float hue = rgb_hue(color.rgb);
     mediump float luminance = rgb_luminance(color.rgb);
     mediump float saturation = rgb_saturation(color.rgb);
 
     mediump float tyf = textureCoordinate.y * tilesY - 0.5;
     mediump float ty1 = floor(tyf);
     mediump float ty2 = ty1 + 1.0;
     mediump float ya = tyf - ty1;
     ty1 = max(ty1, 0.0);
     ty2 = min(ty2, tilesY - 1.0);
 
     mediump float txf = textureCoordinate.x * tilesX - 0.5;
     mediump float tx1 = floor(txf);
     mediump float tx2 = tx1 + 1.0;
     mediump float xa = txf - tx1;
     tx1 = max(tx1, 0.0);
     tx2 = min(tx2, tilesX - 1.0);
 
     mediump float scaled_luminance = luminance * (histSize - 1.0);
 
     mediump vec2 pos = CalculateLutPos(vec2(tx1, ty1), scaled_luminance);
     mediump vec4 color1 = texture2D(inputImageTexture2, pos);
 
     pos = CalculateLutPos(vec2(tx2, ty1), scaled_luminance);
     mediump vec4 color2 = texture2D(inputImageTexture2, pos);
 
     pos = CalculateLutPos(vec2(tx1, ty2), scaled_luminance);
     mediump vec4 color3 = texture2D(inputImageTexture2, pos);
 
     pos = CalculateLutPos(vec2(tx2, ty2), scaled_luminance);
     mediump vec4 color4 = texture2D(inputImageTexture2, pos);
 
     //mediump vec2 posx = vec2(0.5, (floor(textureCoordinate.x * tilesX) + floor(floor(textureCoordinate.y * tilesY) * tilesX) + 0.5) / 64.0);
     //mediump vec4 colorx = texture2D(inputImageTexture2, posx);
 	 //float blk_id = (floor(textureCoordinate.x * tilesX) + floor(floor(textureCoordinate.y * tilesY) * tilesX)) / 64.0;
 	
     mediump float res = color1.a * (1.0 - xa) * (1.0 - ya);
     res += color2.a * xa * (1.0 - ya);
     res += color3.a * (1.0 - xa) * ya;
     res += color4.a * xa * ya;
 
     mediump vec3 hsl = vec3(hue, saturation, res);
     mediump vec3 rgb = hsl2rgb(hsl);
 
     mediump vec3 hsv_ = rgb2hsv(rgb.xyz); //rgb to hsl
     

	 mediump float alphaScale = 1.0;
     if( hsv_.x < 50.4 ){
		if(hsv_.y < 0.23 ){
         alphaScale = 0.6;
       }else if (hsv_.y < 0.68){
         alphaScale = 0.5;
       }
     }     else if(hsv_.x > 313.2){
       if(hsv_.y < 0.68){
		  alphaScale = 0.6;
       }
     }     
  
     mediump float scaled_sat = hsv_.y * (1.0 + adjustFactor); //scaled saturation
     mediump float alpha = (1.0 - hsv_.z) * 0.5 + (1.0 - hsv_.y) * 0.5;
     alpha = alpha * alphaScale;  hsv_.y = hsv_.y * ( 1.0 - alpha ) + scaled_sat * alpha;
     rgb = hsv2rgb(hsv_); 

     gl_FragColor = vec4(rgb, color.a);
 
   }
 }